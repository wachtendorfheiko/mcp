spring.application.name=gemini
server.port=8280
spring.ai.ollama.chat.model=qwen3:4b
spring.ai.mcp.client.sse.connections.author-tools-server.url:http://localhost:8081

# OAuth2 Client Configuration for a 'client_credentials' grant
spring.security.oauth2.client.provider.authserver.issuer-uri=http://localhost:8081

# Client registration for 'authserver-client-credentials'
spring.security.oauth2.client.registration.authserver-client-credentials.provider=authserver
spring.security.oauth2.client.registration.authserver-client-credentials.client-id=mcp-client
spring.security.oauth2.client.registration.authserver-client-credentials.client-secret=secret
spring.security.oauth2.client.registration.authserver-client-credentials.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.authserver-client-credentials.scope=mcp.read,mcp.write

spring.ai.openai.base-url=https://your-openai-compatible-api.com/v1/ # Replace with the actual base URL of your API
spring.ai.openai.api-key=your-custom-api-key # Replace with the API key for your custom service

# Optional: If your API uses a different model name than OpenAI's defaults
# spring.ai.openai.chat.options.model=your-custom-model-name